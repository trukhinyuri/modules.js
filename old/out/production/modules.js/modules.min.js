"use strict";

window.exports = window.exports || (window.exports = {});

(function(Modules) {
    Object.defineProperties(Modules, {
        MODULE: {
            get: function() {
                return "module";
            },
            enumerable: true,
            configurable: false
        },
        TEMPLATE: {
            get: function() {
                return "template";
            },
            enumerable: true,
            configurable: false
        },
        HTML: {
            get: function() {
                return "html";
            },
            enumerable: true,
            configurable: false
        },
        CSS: {
            get: function() {
                return "css";
            },
            enumerable: true,
            configurable: false
        },
        JAVASCRIPT: {
            get: function() {
                return "javascript";
            },
            enumerable: true,
            configurable: false
        }
    });
    (function(DOM) {
        function isHTMLModule(htmlElement) {
            if (htmlElement.parentNode != null) {
                return htmlElement.parentNode.getAttribute("data-" + "modulesjs_item_type") === Modules.MODULE;
            } else {
                return false;
            }
        }
        function isHTMLTemplate(htmlElement) {
            if (htmlElement.parentNode != null) {
                return htmlElement.parentNode.getAttribute("data-" + "modulesjs_item_type") === Modules.TEMPLATE;
            } else {
                return false;
            }
        }
        function getModules(className) {
            var elements = document.getElementsByClassName(className);
            var result = new Array();
            for (var i = 0; i < elements.length; i++) {
                if (isHTMLModule(elements[i])) {
                    result.push(elements[i]);
                }
            }
            return result;
        }
        function getTemplates(className) {
            var elements = document.getElementsByClassName(className);
            var result = new Array();
            for (var i = 0; i < elements.length; i++) {
                if (isHTMLTemplate(elements[i])) {
                    result.push(elements[i]);
                }
            }
            return result;
        }
        function getFirstContainerElementByClassName(htmlElement, className) {
            if (htmlElement.className === className) {
                return htmlElement;
            } else {
                if (htmlElement.parentNode != null) {
                    return getFirstContainerElementByClassName(htmlElement.parentNode, className);
                } else {
                    return null;
                }
            }
        }
        function getFirstElementByClassName(htmlDocument, className) {
            return htmlDocument.getElementsByClassName(className)[0];
        }
        DOM.isHTMLModule = isHTMLModule;
        DOM.isHTMLTemplate = isHTMLTemplate;
        DOM.getModules = getModules;
        DOM.getTemplates = getTemplates;
        DOM.getFirstContainerElementByClassName = getFirstContainerElementByClassName;
        DOM.getFirstElementByClassName = getFirstElementByClassName;
    })(Modules.DOM || (Modules.DOM = {}));
    var DOM = Modules.DOM;
    (function(Loader) {})(Modules.Loader || (Modules.Loader = {}));
    var Loader = Modules.Loader;
    (function(Events) {
        function addListener(target, type, listener, useCapture) {
            var _useCapture = useCapture || false;
            target.addEventListener(type, listener, _useCapture);
            return listener;
        }
        function addContextListener(target, type, listener, context, useCapture) {
            var _context = context || this;
            var _useCapture = useCapture || false;
            var bindedListener = listener.bind(_context);
            target.addEventListener(type, bindedListener, _useCapture);
            return bindedListener;
        }
        function removeListener(target, type, listener, useCapture) {
            var _useCapture = useCapture || false;
            target.removeEventListener(type, listener, _useCapture);
        }
        function addStartupListener(listener) {
            addListener(document, "DOMContentLoaded", listener, false);
            return listener;
        }
        function addStartupContextListener(listener, context) {
            var _context = context || this;
            return addContextListener(document, "DOMContentLoaded", listener, _context, false);
        }
        function removeStartupListener(listener) {
            removeListener(document, "DOMContentLoaded", listener, false);
        }
        function addDocumentListener(type, listener, useCapture) {
            addListener(document, type, listener, useCapture);
            return listener;
        }
        function addDocumentContextListener(type, listener, context, useCapture) {
            var _context = context || this;
            return addContextListener(document, type, listener, _context, useCapture);
        }
        function removeDocumentListener(type, listener, useCapture) {
            var _useCapture = useCapture || false;
            removeListener(document, type, listener, _useCapture);
        }
        function addItemLoadedListener(ITEM_TYPE, itemName, listener) {
            if (ITEM_TYPE === Modules.MODULE) {
                return addListener(document, "module_" + itemName + "_loaded", listener, false);
            } else if (ITEM_TYPE === Modules.TEMPLATE) {
                return addListener(document, "template_" + itemName + "_loaded", listener, false);
            } else if (ITEM_TYPE === Modules.HTML) {
                return addListener(document, "html_" + itemName + "_loaded", listener, false);
            } else if (ITEM_TYPE === Modules.CSS) {
                return addListener(document, "css_" + itemName + "_loaded", listener, false);
            } else if (ITEM_TYPE === Modules.JAVASCRIPT) {
                return addListener(document, "js_" + itemName + "_loaded", listener, false);
            }
        }
        function addItemLoadedContextListener(ITEM_TYPE, itemName, listener, context) {
            var _context = context || this;
            if (ITEM_TYPE === Modules.MODULE) {
                return addContextListener(document, "module_" + itemName + "_loaded", listener, _context, false);
            } else if (ITEM_TYPE === Modules.TEMPLATE) {
                return addContextListener(document, "template_" + itemName + "_loaded", listener, _context, false);
            } else if (ITEM_TYPE === Modules.HTML) {
                return addContextListener(document, "html_" + itemName + "_loaded", listener, _context, false);
            } else if (ITEM_TYPE === Modules.CSS) {
                return addContextListener(document, "css_" + itemName + "_loaded", listener, _context, false);
            } else if (ITEM_TYPE === Modules.JAVASCRIPT) {
                return addContextListener(document, "js_" + itemName + "_loaded", listener, _context, false);
            }
        }
        function removeItemLoadedListener(ITEM_TYPE, itemName, listener) {
            if (ITEM_TYPE === Modules.MODULE) {
                removeListener(document, "module_" + itemName + "_loaded", listener, false);
            } else if (ITEM_TYPE === Modules.TEMPLATE) {
                removeListener(document, "template_" + itemName + "_loaded", listener, false);
            } else if (ITEM_TYPE === Modules.HTML) {
                removeListener(document, "html_" + itemName + "_loaded", listener, false);
            } else if (ITEM_TYPE === Modules.CSS) {
                removeListener(document, "css_" + itemName + "_loaded", listener, false);
            } else if (ITEM_TYPE === Modules.JAVASCRIPT) {
                removeListener(document, "js_" + itemName + "_loaded", listener, false);
            }
        }
        function addBeforeItemLoadedListener(ITEM_TYPE, itemName, listener) {
            if (ITEM_TYPE === Modules.MODULE) {
                return addListener(document, "module_" + itemName + "_loadingStarted", listener, false);
            } else if (ITEM_TYPE === Modules.TEMPLATE) {
                return addListener(document, "template_" + itemName + "_loadingStarted", listener, false);
            } else if (ITEM_TYPE === Modules.HTML) {
                return addListener(document, "html_" + itemName + "_loadingStarted", listener, false);
            } else if (ITEM_TYPE === Modules.CSS) {
                return addListener(document, "css_" + itemName + "_loadingStarted", listener, false);
            } else if (ITEM_TYPE === Modules.JAVASCRIPT) {
                return addListener(document, "js_" + itemName + "_loadingStarted", listener, false);
            }
        }
        function addBeforeItemLoadedContextListener(ITEM_TYPE, itemName, listener, context) {
            var _context = context || this;
            if (ITEM_TYPE === Modules.MODULE) {
                return addContextListener(document, "module_" + itemName + "_loadingStarted", listener, _context, false);
            } else if (ITEM_TYPE === Modules.TEMPLATE) {
                return addContextListener(document, "template_" + itemName + "_loadingStarted", listener, _context, false);
            } else if (ITEM_TYPE === Modules.HTML) {
                return addContextListener(document, "html_" + itemName + "_loadingStarted", listener, _context, false);
            } else if (ITEM_TYPE === Modules.CSS) {
                return addContextListener(document, "css_" + itemName + "_loadingStarted", listener, _context, false);
            } else if (ITEM_TYPE === Modules.JAVASCRIPT) {
                return addContextListener(document, "js_" + itemName + "_loadingStarted", listener, _context, false);
            }
        }
        function removeBeforeItemLoadedListener(ITEM_TYPE, itemName, listener) {
            if (ITEM_TYPE === Modules.MODULE) {
                removeListener(document, "module_" + itemName + "_loadingStarted", listener, false);
            } else if (ITEM_TYPE === Modules.TEMPLATE) {
                removeListener(document, "template_" + itemName + "_loadingStarted", listener, false);
            } else if (ITEM_TYPE === Modules.HTML) {
                removeListener(document, "html_" + itemName + "_loadingStarted", listener, false);
            } else if (ITEM_TYPE === Modules.CSS) {
                removeListener(document, "css_" + itemName + "_loadingStarted", listener, false);
            } else if (ITEM_TYPE === Modules.JAVASCRIPT) {
                removeListener(document, "js_" + itemName + "_loadingStarted", listener, false);
            }
        }
        function addListeners(targets, type, listener, useCapture) {
            var _useCapture = useCapture || false;
            var length = targets.length;
            for (var i = 0; i < length; i++) {
                targets[i].addEventListener(type, listener, _useCapture);
            }
            return listener;
        }
        function addContextListeners(targets, type, listener, context, useCapture) {
            var _useCapture = useCapture || false;
            var _context = context || this;
            var bindedListener = listener.bind(_context);
            var length = targets.length;
            for (var i = 0; i < targets.length; i++) {
                targets[i].addEventListener(type, bindedListener, _useCapture);
            }
            return bindedListener;
        }
        function removeListeners(targets, type, listener, useCapture) {
            var _useCapture = useCapture || false;
            var length = targets.length;
            for (var i = 0; i < length; i++) {
                removeListener(targets[i], type, listener, _useCapture);
            }
        }
        function dispatchCustomEvent(target, type, detail, canBubble, cancelable) {
            var _canBubble = canBubble || false;
            var _cancelable = cancelable || false;
            var _detail = detail || undefined;
            var event = document.createEvent("CustomEvent");
            event.initCustomEvent(type, _canBubble, _cancelable, _detail);
            return target.dispatchEvent(event);
        }
        (function(Messages) {
            function subscribe(theme, listener, sourceID, destinationID) {
                var messagePrefix = "modulesjs_message_";
                var calculatedTheme = calculateTheme();
                function calculateTheme() {
                    var _calculatedTheme = "";
                    if (sourceID == null) {
                        if (destinationID == null) {
                            _calculatedTheme = messagePrefix + theme;
                        } else {
                            _calculatedTheme = messagePrefix + theme + "__" + destinationID;
                        }
                    } else {
                        if (destinationID == null) {
                            _calculatedTheme = messagePrefix + theme + "_" + sourceID;
                        } else {
                            _calculatedTheme = messagePrefix + theme + "_" + sourceID + "_" + destinationID;
                        }
                    }
                    return _calculatedTheme;
                }
                if (calculatedTheme != "") {
                    Modules.Events.addDocumentListener(calculatedTheme, listener, false);
                }
            }
            function send(theme, detail, sourceID, destinationID) {
                var messagePrefix = "modulesjs_message";
                var calculatedTheme = calculateTheme();
                function calculateTheme() {
                    var _calculatedTheme = "";
                    if (sourceID == null) {
                        if (destinationID == null) {
                            _calculatedTheme = messagePrefix + "_" + theme;
                        } else {
                            _calculatedTheme = messagePrefix + "_" + theme + "__" + destinationID;
                        }
                    } else {
                        if (destinationID == null) {
                            _calculatedTheme = messagePrefix + "_" + theme + "_" + sourceID;
                        } else {
                            _calculatedTheme = messagePrefix + "_" + theme + "_" + sourceID + "_" + destinationID;
                        }
                    }
                    return _calculatedTheme;
                }
                var detailObject = {
                    postAdress: {
                        sourceID: sourceID,
                        destinationID: destinationID
                    },
                    message: detail
                };
                if (calculatedTheme !== "") {
                    Modules.Events.dispatchCustomEvent(document, calculatedTheme, detailObject, false, false);
                }
            }
            function unsubscribe(theme, listener, sourceID, destinationID) {
                var messagePrefix = "modulesjs_message";
                if (sourceID == null) {
                    if (destinationID == null) {
                        _unsubscribe(messagePrefix + "_" + theme);
                    } else {
                        _unsubscribe(messagePrefix + "_" + theme + "__" + destinationID);
                    }
                } else {
                    if (destinationID == null) {
                        _unsubscribe(messagePrefix + "_" + theme + "_" + sourceID);
                    } else {
                        _unsubscribe(messagePrefix + "_" + theme + "_" + sourceID + "_" + destinationID);
                    }
                }
                function _unsubscribe(theme) {
                    Modules.Events.removeDocumentListener(theme, listener);
                }
            }
            Messages.send = send;
            Messages.subscribe = subscribe;
            Messages.unsubscribe = unsubscribe;
        })(Modules.Events.Messages || (Modules.Events.Messages = {}));
        var Messages = Modules.Events.Messages;
        Events.addListener = addListener;
        Events.addContextListener = addContextListener;
        Events.removeListener = removeListener;
        Events.addStartupListener = addStartupListener;
        Events.addStartupContextListener = addStartupContextListener;
        Events.removeStartupListener = removeStartupListener;
        Events.addDocumentListener = addDocumentListener;
        Events.addDocumentContextListener = addDocumentContextListener;
        Events.removeDocumentListener = removeDocumentListener;
        Events.addItemLoadedListener = addItemLoadedListener;
        Events.addItemLoadedContextListener = addItemLoadedContextListener;
        Events.removeItemLoadedListener = removeItemLoadedListener;
        Events.addBeforeItemLoadedListener = addBeforeItemLoadedListener;
        Events.addBeforeItemLoadedContextListener = addBeforeItemLoadedContextListener;
        Events.removeBeforeItemLoadedListener = removeBeforeItemLoadedListener;
        Events.addListeners = addListeners;
        Events.addContextListeners = addContextListeners;
        Events.removeListeners = removeListeners;
        Events.dispatchCustomEvent = dispatchCustomEvent;
    })(Modules.Events || (Modules.Events = {}));
    var Events = Modules.Events;
    (function(Server) {
        function getString(url) {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, false);
            xhr.send(null);
            return xhr.responseText;
        }
        function getStringAsync(url, handler) {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, true);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200 || xhr.status === 304) {
                        handler(xhr.responseText);
                    }
                }
            };
            xhr.send();
        }
        function loadJSONConfig(path, name, callback) {
            var jsLoaded = document.getElementsByClassName("modulesjs-config-" + name)[0];
            if (jsLoaded) {
                document.getElementsByTagName("head")[0].removeChild(jsLoaded);
            }
            var script = document.createElement("script");
            script.src = path + "/" + name + ".js";
            script.className = "modulesjs-config-" + name;
            script.type = "text/javascript";
            document.getElementsByTagName("head")[0].appendChild(script);
            var done = false;
            script.onreadystatechange = script.onload = function() {
                var state = script.readyState;
                if (!done && (!state || state === "loaded" || state === "complete")) {
                    done = true;
                    document.dispatchEvent(new CustomEvent("config_" + name + "_loaded", {
                        detail: {
                            configName: name,
                            _path: path
                        }
                    }));
                    if (callback) {
                        callback(name);
                    }
                }
            };
        }
        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        Server.getString = getString;
        Server.getStringAsync = getStringAsync;
        Server.loadJSONConfig = loadJSONConfig;
        Server.getRandomInt = getRandomInt;
    })(Modules.Server || (Modules.Server = {}));
})(window.exports.Modules || (window.exports.Modules = {}));

var Modules = window.exports.Modules;